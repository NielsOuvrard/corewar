
// void check_all_functions (prog_t *prog)
// {
    // int index;
    // for (prog->index = COMMENT_LENGTH; prog->binaire[prog->index] > 0x10 ||
    // prog->binaire[prog->index] < 1 &&
    // prog->index < prog->size_binaire; prog->index++);
    // while (prog->index < prog->size_binaire) {
        // int fun_actual = prog->binaire[prog->index] - 1;
        // command_s *com = new_command(prog->commandes, fun_actual);
        // if (!prog->commandes)
        //     prog->commandes = com;
        // op_t val = op_tab[fun_actual];
        // prog->index++;
        // if (fun_actual == 0 || fun_actual == 8
        // || fun_actual == 11 || fun_actual == 14) {
        //     a_special_function(prog, com);
        // } else {
        //     non_special_function(prog, com);
        // }
    // }
// }

// disp_str_to_hexa(str, size);
    // int size = 0, first_command;
    // unsigned char *str = filepath_to_str(filepath, &size);
    // if (!str)
    //     return NULL;
    // char *name = NULL;
    // if (!check_magic(str, size, &name))
    //     return NULL;
    // my_printf("name prog %s\n", name);

    // programme->binaire = str;
    // programme->size_binaire = size;
    // programme->commandes = NULL;
    // check_all_functions(programme);
    // my_printf("\nquit VM\n");


// void life (prog_t *prog)
// {
    // my_printf("\nThe player %d(%s)is alive.\n", prog->commandes->params[1], prog->prog_name);
// }

// void recup_params_according_to_str (prog_t *prog, command_s *com)
// {
    // unsigned char *str = prog->binaire + prog->index;
    // int index = 0, index_arr = 1;
    // for (int i = 0; com->parametres_type[i]; i++) {
    //     if (com->parametres_type[i] == 'r') {
    //         com->params[index_arr++] = (int)str[index];
    //         index += 1;
    //     }
    //     if (com->parametres_type[i] == 'd' &&
    //     com->function != 9 && com->function != 10) {
    //         com->params[index_arr++] = char_nmb_to_int(str + index, DIR_SIZE);
    //         index += DIR_SIZE;
    //     }
    //     if (com->parametres_type[i] == 'i' || (com->parametres_type[i] == 'd'
    //     && (com->function == 9 || com->function == 10))) {
    //         com->params[index_arr++] = char_nmb_to_int(str + index, IND_SIZE);
    //         index += IND_SIZE;
    //     }
    // }
    // prog->index += index;
// }
// free(com->parametres_type);

// live, zjmp, fork, lfork.
// void a_special_function (prog_t *prog, command_s *com)
// {
    // com->params = malloc(sizeof(int) * 2);
    // com->params[0] = 1;
    // if (com->function == 0) {
    //     com->params[1] =
    //     char_nmb_to_int(prog->binaire + prog->index, DIR_SIZE);
    //     prog->index += DIR_SIZE;
    //     return;
    // }
    // com->params[1] = char_nmb_to_int(prog->binaire + prog->index, IND_SIZE);
    // prog->index += IND_SIZE;
    // return;
// }

// void non_special_function (prog_t *prog, command_s *com)
// {
    // com->parametres_type = type_param_to_str(prog->binaire[prog->index]);
    // int nmb_args = how_many_args(com->parametres_type);
    // com->params = malloc(sizeof(int) * (nmb_args + 1));
    // com->params[0] = nmb_args;
    // char parameter_type = prog->binaire[prog->index];
    // if (!parameter_type) {
    //     prog->index = 0x0fffffff;
    //     return;
    // }
    // prog->index++;
    // recup_params_according_to_str(prog, com);
// }

// void check_all_functions (prog_t *prog)
// {
    // int index;
    // for (prog->index = COMMENT_LENGTH; prog->binaire[prog->index] > 0x10 ||
    // prog->binaire[prog->index] < 1 &&
    // prog->index < prog->size_binaire; prog->index++);
    // while (prog->index < prog->size_binaire) {
    //     int fun_actual = prog->binaire[prog->index] - 1;
    //     command_s *com = new_command(prog->commandes, fun_actual);
    //     if (!prog->commandes)
    //         prog->commandes = com;
    //     op_t val = op_tab[fun_actual];
    //     prog->index++;
    //     if (fun_actual == 0 || fun_actual == 8
    //     || fun_actual == 11 || fun_actual == 14) {
    //         a_special_function(prog, com);
    //     } else {
    //         non_special_function(prog, com);
    //     }
    // }
// }

// disp_str_to_hexa(str, size);
    // int size = 0, first_command;
    // unsigned char *str = filepath_to_str(filepath, &size);
    // if (!str)
    //     return NULL;
    // char *name = NULL;
    // if (!check_magic(str, size, &name))
    //     return NULL;
    // my_printf("name prog %s\n", name);

    // programme->binaire = str;
    // programme->size_binaire = size;
    // programme->commandes = NULL;
    // check_all_functions(programme);
    // my_printf("\nquit VM\n");



// void free_prog (prog_t *prog)
// {
//     free(prog->binaire);
//     free(prog->prog_name);
//     command_s *head = prog->commandes;
//     while (head) {
//         command_s *tmp = head;
//         head = head->next;
//         free(tmp->params);
//         free(tmp->parametres_type);
//         free(tmp);
//     }
//     free(prog);
// }

// void free_alls_progs (prog_t *progs)
// {
//     while (progs) {
//         prog_t *tmp = progs;
//         progs = progs->next;
//         free_prog(tmp);
//     }
// }




// char **file = file_cor_to_array(av[1], size);
// if (!file)
//     return 84;
// my_printf("\nle array :\n");
// for (int i = 0; file[i]; i++) {
//     if (!(i % 10))
//         my_putchar('\n');
//     my_printf("%s\t", file[i]);
// }
// free_my_arr(file);


// void disp_alls_commandes (prog_t *prog)
// {
//     command_s *com = prog->commandes;
//     my_printf("debut des commandes\n");
//     while (com) {
//         op_t val = op_tab[com->function];
//         my_printf("com %s\nargs : ", val.mnemonique);
//         for (int a = 1; a < com->params[0] + 1; a++)
//             my_printf("'%d' ", com->params[a]);
//         my_printf("\ncycles : %d\n\n", val.nbr_cycles);
//         com = com->next;
//     }
//     my_printf("fin des commandes\n");
// }

// command_s *new_command (command_s *old, int fun)
// {
//     command_s *new = malloc(sizeof(command_s));
//     new->function = fun;
//     new->next = NULL;
//     if (!old)
//         return new;
//     my_printf("not null! ");
//     command_s *begin = old;
//     while (old && old->next) {
//         my_printf("next");
//         old = old->next;
//     }
//     old->next = new;
//     return begin;
// }


// char **filepath_to_arr (char *filepath)
// {
//     char *buff = filepath_to_str(filepath);
//     if (!buff)
//         return NULL;
//     int offset, a = 0, k, i, j = 0;
//     offset = my_strlen(buff);
//     for (int kfc = 0; buff[kfc] != '\0'; kfc++)
//         if (buff[kfc] == '\n')
//             a++;
//     char **map = malloc(sizeof(char *) * (a + 2));
//     for (i = 0; a > i; i++) {
//         map[i] = malloc(sizeof(char) * (offset));
//         for (k = 0; buff[j] != '\n'; k++)
//             map[i][k] = buff[j++];
//         j++;
//         map[i][k] = '\0';
//     }
//     map[a] = NULL;
//     free(buff);
//     return map;
// }

// char *str_but_shorter (char *src, int size)
// {
//     char *str = malloc(sizeof(char));
//     str[0] = '\0';
//     for (int i = 0; i < size - 1; i++) {
//         if (src[i])
//             str = str_plus_one(str, src[i]);
//     }
//     return str;
// }
